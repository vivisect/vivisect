import io
import zipfile
import unittest

import vivisect
import vivisect.tests.helpers as helpers


class MalwareTests(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        testpath = helpers.getTestPath('windows', 'i386', 'malware.zip')
        cls.mmap_vw = vivisect.VivWorkspace()
        with zipfile.ZipFile(testpath, mode='r') as zp:
            fd = io.BytesIO(zp.open('mal_memmaps.exe', pwd='infected', mode='r').read())
            # DEV: intentionally skipping analysis for now since the tests I have in mind
            # initially don't need it (and it adds a lot of time that isn't worth it until we
            # add a lot more tests)
            cls.mmap_vw.loadFromFd(fd)


    def test_memorymaps_basicperms(self):
        vw = self.mmap_vw
        maps = set([
            (268435456, 4096, 4, '0e25aa791c9119108af073bc9e9d0fa2'),
            (268439552, 420578, 5, '0e25aa791c9119108af073bc9e9d0fa2'),
            (268861440, 56256, 4, '0e25aa791c9119108af073bc9e9d0fa2'),
            (268918784, 79100, 6, '0e25aa791c9119108af073bc9e9d0fa2'),
            (269004800, 17638, 4, '0e25aa791c9119108af073bc9e9d0fa2'),
        ])
        self.assertEqual(maps, set(vw.getMemoryMaps()))

    def test_locations(self):
        # make sure none of the locations in any of the other maps are opcodes
        vw = self.mmap_vw
        for lva, lsize, ltype, linfo in vw.getLocations():
            memmap = vw.getMemoryMap(lva)
            if memmap[0] != 268439552:
                self.assertNotEqual(ltype, 5)
