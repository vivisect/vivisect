# Generated from:
#   b'https://github.com/riscv/riscv-isa-manual'
#   b'tags/draft-20221004-28b46de'
#   b'28b46de77ca7fb94ffcf6cf669cc27269f6013de'

from collections import namedtuple


# Standard types used in the generated instruction list
RiscVCSRReg = namedtuple('RiscVCSRReg', ['num', 'perm', 'name', 'description'])


csr_regs = {
    0x001: RiscVCSRReg(0x001, 'URW', 'fflags', 'Floating-Point Accrued Exceptions. '),
    0x002: RiscVCSRReg(0x002, 'URW', 'frm', 'Floating-Point Dynamic Rounding Mode. '),
    0xC00: RiscVCSRReg(0xC00, 'URO', 'cycle', 'Cycle counter for RDCYCLE instruction. '),
    0xC01: RiscVCSRReg(0xC01, 'URO', 'time', 'Timer for RDTIME instruction. '),
    0xC02: RiscVCSRReg(0xC02, 'URO', 'instret', 'Instructions-retired counter for RDINSTRET instruction. '),
    0xC03: RiscVCSRReg(0xC03, 'URO', 'hpmcounter3', 'Performance-monitoring counter. '),
    0xC04: RiscVCSRReg(0xC04, 'URO', 'hpmcounter4', 'Performance-monitoring counter. '),
    0xc05: RiscVCSRReg(0xc05, 'URO', 'hpmcounter5', ''),
    0xc06: RiscVCSRReg(0xc06, 'URO', 'hpmcounter6', ''),
    0xc07: RiscVCSRReg(0xc07, 'URO', 'hpmcounter7', ''),
    0xc08: RiscVCSRReg(0xc08, 'URO', 'hpmcounter8', ''),
    0xc09: RiscVCSRReg(0xc09, 'URO', 'hpmcounter9', ''),
    0xc0a: RiscVCSRReg(0xc0a, 'URO', 'hpmcounter10', ''),
    0xc0b: RiscVCSRReg(0xc0b, 'URO', 'hpmcounter11', ''),
    0xc0c: RiscVCSRReg(0xc0c, 'URO', 'hpmcounter12', ''),
    0xc0d: RiscVCSRReg(0xc0d, 'URO', 'hpmcounter13', ''),
    0xc0e: RiscVCSRReg(0xc0e, 'URO', 'hpmcounter14', ''),
    0xc0f: RiscVCSRReg(0xc0f, 'URO', 'hpmcounter15', ''),
    0xc10: RiscVCSRReg(0xc10, 'URO', 'hpmcounter16', ''),
    0xc11: RiscVCSRReg(0xc11, 'URO', 'hpmcounter17', ''),
    0xc12: RiscVCSRReg(0xc12, 'URO', 'hpmcounter18', ''),
    0xc13: RiscVCSRReg(0xc13, 'URO', 'hpmcounter19', ''),
    0xc14: RiscVCSRReg(0xc14, 'URO', 'hpmcounter20', ''),
    0xc15: RiscVCSRReg(0xc15, 'URO', 'hpmcounter21', ''),
    0xc16: RiscVCSRReg(0xc16, 'URO', 'hpmcounter22', ''),
    0xc17: RiscVCSRReg(0xc17, 'URO', 'hpmcounter23', ''),
    0xc18: RiscVCSRReg(0xc18, 'URO', 'hpmcounter24', ''),
    0xc19: RiscVCSRReg(0xc19, 'URO', 'hpmcounter25', ''),
    0xc1a: RiscVCSRReg(0xc1a, 'URO', 'hpmcounter26', ''),
    0xc1b: RiscVCSRReg(0xc1b, 'URO', 'hpmcounter27', ''),
    0xc1c: RiscVCSRReg(0xc1c, 'URO', 'hpmcounter28', ''),
    0xc1d: RiscVCSRReg(0xc1d, 'URO', 'hpmcounter29', ''),
    0xc1e: RiscVCSRReg(0xc1e, 'URO', 'hpmcounter30', ''),
    0xC1F: RiscVCSRReg(0xC1F, 'URO', 'hpmcounter31', 'Performance-monitoring counter. '),
    0xC80: RiscVCSRReg(0xC80, 'URO', 'cycleh', 'Upper 32 bits of {\tt cycle}, RV32 only. '),
    0xC81: RiscVCSRReg(0xC81, 'URO', 'timeh', 'Upper 32 bits of {\tt time}, RV32 only. '),
    0xC82: RiscVCSRReg(0xC82, 'URO', 'instreth', 'Upper 32 bits of {\tt instret}, RV32 only. '),
    0xC83: RiscVCSRReg(0xC83, 'URO', 'hpmcounter3h', 'Upper 32 bits of {\tt hpmcounter3}, RV32 only. '),
    0xC84: RiscVCSRReg(0xC84, 'URO', 'hpmcounter4h', 'Upper 32 bits of {\tt hpmcounter4}, RV32 only. '),
    0xc85: RiscVCSRReg(0xc85, 'URO', 'hpmcounter5h', ''),
    0xc86: RiscVCSRReg(0xc86, 'URO', 'hpmcounter6h', ''),
    0xc87: RiscVCSRReg(0xc87, 'URO', 'hpmcounter7h', ''),
    0xc88: RiscVCSRReg(0xc88, 'URO', 'hpmcounter8h', ''),
    0xc89: RiscVCSRReg(0xc89, 'URO', 'hpmcounter9h', ''),
    0xc8a: RiscVCSRReg(0xc8a, 'URO', 'hpmcounter10h', ''),
    0xc8b: RiscVCSRReg(0xc8b, 'URO', 'hpmcounter11h', ''),
    0xc8c: RiscVCSRReg(0xc8c, 'URO', 'hpmcounter12h', ''),
    0xc8d: RiscVCSRReg(0xc8d, 'URO', 'hpmcounter13h', ''),
    0xc8e: RiscVCSRReg(0xc8e, 'URO', 'hpmcounter14h', ''),
    0xc8f: RiscVCSRReg(0xc8f, 'URO', 'hpmcounter15h', ''),
    0xc90: RiscVCSRReg(0xc90, 'URO', 'hpmcounter16h', ''),
    0xc91: RiscVCSRReg(0xc91, 'URO', 'hpmcounter17h', ''),
    0xc92: RiscVCSRReg(0xc92, 'URO', 'hpmcounter18h', ''),
    0xc93: RiscVCSRReg(0xc93, 'URO', 'hpmcounter19h', ''),
    0xc94: RiscVCSRReg(0xc94, 'URO', 'hpmcounter20h', ''),
    0xc95: RiscVCSRReg(0xc95, 'URO', 'hpmcounter21h', ''),
    0xc96: RiscVCSRReg(0xc96, 'URO', 'hpmcounter22h', ''),
    0xc97: RiscVCSRReg(0xc97, 'URO', 'hpmcounter23h', ''),
    0xc98: RiscVCSRReg(0xc98, 'URO', 'hpmcounter24h', ''),
    0xc99: RiscVCSRReg(0xc99, 'URO', 'hpmcounter25h', ''),
    0xc9a: RiscVCSRReg(0xc9a, 'URO', 'hpmcounter26h', ''),
    0xc9b: RiscVCSRReg(0xc9b, 'URO', 'hpmcounter27h', ''),
    0xc9c: RiscVCSRReg(0xc9c, 'URO', 'hpmcounter28h', ''),
    0xc9d: RiscVCSRReg(0xc9d, 'URO', 'hpmcounter29h', ''),
    0xc9e: RiscVCSRReg(0xc9e, 'URO', 'hpmcounter30h', ''),
    0xC9F: RiscVCSRReg(0xC9F, 'URO', 'hpmcounter31h', 'Upper 32 bits of {\tt hpmcounter31}, RV32 only. '),
    0x100: RiscVCSRReg(0x100, 'SRW', 'sstatus', 'Supervisor status register. '),
    0x104: RiscVCSRReg(0x104, 'SRW', 'sie', 'Supervisor interrupt-enable register. '),
    0x105: RiscVCSRReg(0x105, 'SRW', 'stvec', 'Supervisor trap handler base address. '),
    0x106: RiscVCSRReg(0x106, 'SRW', 'scounteren', 'Supervisor counter enable. '),
    0x10A: RiscVCSRReg(0x10A, 'SRW', 'senvcfg', 'Supervisor environment configuration register. '),
    0x140: RiscVCSRReg(0x140, 'SRW', 'sscratch', 'Scratch register for supervisor trap handlers. '),
    0x141: RiscVCSRReg(0x141, 'SRW', 'sepc', 'Supervisor exception program counter. '),
    0x142: RiscVCSRReg(0x142, 'SRW', 'scause', 'Supervisor trap cause. '),
    0x143: RiscVCSRReg(0x143, 'SRW', 'stval', 'Supervisor bad address or instruction. '),
    0x144: RiscVCSRReg(0x144, 'SRW', 'sip', 'Supervisor interrupt pending. '),
    0x180: RiscVCSRReg(0x180, 'SRW', 'satp', 'Supervisor address translation and protection. '),
    0x5A8: RiscVCSRReg(0x5A8, 'SRW', 'scontext', 'Supervisor-mode context register. '),
    0x600: RiscVCSRReg(0x600, 'HRW', 'hstatus', 'Hypervisor status register. '),
    0x602: RiscVCSRReg(0x602, 'HRW', 'hedeleg', 'Hypervisor exception delegation register. '),
    0x603: RiscVCSRReg(0x603, 'HRW', 'hideleg', 'Hypervisor interrupt delegation register. '),
    0x604: RiscVCSRReg(0x604, 'HRW', 'hie', 'Hypervisor interrupt-enable register. '),
    0x606: RiscVCSRReg(0x606, 'HRW', 'hcounteren', 'Hypervisor counter enable. '),
    0x607: RiscVCSRReg(0x607, 'HRW', 'hgeie', 'Hypervisor guest external interrupt-enable register. '),
    0x643: RiscVCSRReg(0x643, 'HRW', 'htval', 'Hypervisor bad guest physical address. '),
    0x644: RiscVCSRReg(0x644, 'HRW', 'hip', 'Hypervisor interrupt pending. '),
    0x645: RiscVCSRReg(0x645, 'HRW', 'hvip', 'Hypervisor virtual interrupt pending. '),
    0x64A: RiscVCSRReg(0x64A, 'HRW', 'htinst', 'Hypervisor trap instruction (transformed). '),
    0xE12: RiscVCSRReg(0xE12, 'HRO', 'hgeip', 'Hypervisor guest external interrupt pending. '),
    0x60A: RiscVCSRReg(0x60A, 'HRW', 'henvcfg', 'Hypervisor environment configuration register. '),
    0x61A: RiscVCSRReg(0x61A, 'HRW', 'henvcfgh', 'Additional hypervisor env. conf. register, RV32 only. '),
    0x680: RiscVCSRReg(0x680, 'HRW', 'hgatp', 'Hypervisor guest address translation and protection. '),
    0x6A8: RiscVCSRReg(0x6A8, 'HRW', 'hcontext', 'Hypervisor-mode context register. '),
    0x605: RiscVCSRReg(0x605, 'HRW', 'htimedelta', 'Delta for VS/VU-mode timer. '),
    0x615: RiscVCSRReg(0x615, 'HRW', 'htimedeltah', 'Upper 32 bits of {\tt htimedelta}, HSXLEN=32 only. '),
    0x200: RiscVCSRReg(0x200, 'HRW', 'vsstatus', 'Virtual supervisor status register. '),
    0x204: RiscVCSRReg(0x204, 'HRW', 'vsie', 'Virtual supervisor interrupt-enable register. '),
    0x205: RiscVCSRReg(0x205, 'HRW', 'vstvec', 'Virtual supervisor trap handler base address. '),
    0x240: RiscVCSRReg(0x240, 'HRW', 'vsscratch', 'Virtual supervisor scratch register. '),
    0x241: RiscVCSRReg(0x241, 'HRW', 'vsepc', 'Virtual supervisor exception program counter. '),
    0x242: RiscVCSRReg(0x242, 'HRW', 'vscause', 'Virtual supervisor trap cause. '),
    0x243: RiscVCSRReg(0x243, 'HRW', 'vstval', 'Virtual supervisor bad address or instruction. '),
    0x244: RiscVCSRReg(0x244, 'HRW', 'vsip', 'Virtual supervisor interrupt pending. '),
    0x280: RiscVCSRReg(0x280, 'HRW', 'vsatp', 'Virtual supervisor address translation and protection. '),
    0xF11: RiscVCSRReg(0xF11, 'MRO', 'mvendorid', 'Vendor ID. '),
    0xF12: RiscVCSRReg(0xF12, 'MRO', 'marchid', 'Architecture ID. '),
    0xF13: RiscVCSRReg(0xF13, 'MRO', 'mimpid', 'Implementation ID. '),
    0xF14: RiscVCSRReg(0xF14, 'MRO', 'mhartid', 'Hardware thread ID. '),
    0xF15: RiscVCSRReg(0xF15, 'MRO', 'mconfigptr', 'Pointer to configuration data structure. '),
    0x300: RiscVCSRReg(0x300, 'MRW', 'mstatus', 'Machine status register. '),
    0x301: RiscVCSRReg(0x301, 'MRW', 'misa', 'ISA and extensions '),
    0x302: RiscVCSRReg(0x302, 'MRW', 'medeleg', 'Machine exception delegation register. '),
    0x303: RiscVCSRReg(0x303, 'MRW', 'mideleg', 'Machine interrupt delegation register. '),
    0x304: RiscVCSRReg(0x304, 'MRW', 'mie', 'Machine interrupt-enable register. '),
    0x305: RiscVCSRReg(0x305, 'MRW', 'mtvec', 'Machine trap-handler base address. '),
    0x306: RiscVCSRReg(0x306, 'MRW', 'mcounteren', 'Machine counter enable. '),
    0x310: RiscVCSRReg(0x310, 'MRW', 'mstatush', 'Additional machine status register, RV32 only. '),
    0x340: RiscVCSRReg(0x340, 'MRW', 'mscratch', 'Scratch register for machine trap handlers. '),
    0x341: RiscVCSRReg(0x341, 'MRW', 'mepc', 'Machine exception program counter. '),
    0x342: RiscVCSRReg(0x342, 'MRW', 'mcause', 'Machine trap cause. '),
    0x343: RiscVCSRReg(0x343, 'MRW', 'mtval', 'Machine bad address or instruction. '),
    0x344: RiscVCSRReg(0x344, 'MRW', 'mip', 'Machine interrupt pending. '),
    0x34A: RiscVCSRReg(0x34A, 'MRW', 'mtinst', 'Machine trap instruction (transformed). '),
    0x34B: RiscVCSRReg(0x34B, 'MRW', 'mtval2', 'Machine bad guest physical address. '),
    0x30A: RiscVCSRReg(0x30A, 'MRW', 'menvcfg', 'Machine environment configuration register. '),
    0x31A: RiscVCSRReg(0x31A, 'MRW', 'menvcfgh', 'Additional machine env. conf. register, RV32 only. '),
    0x747: RiscVCSRReg(0x747, 'MRW', 'mseccfg', 'Machine security configuration register. '),
    0x757: RiscVCSRReg(0x757, 'MRW', 'mseccfgh', 'Additional machine security conf. register, RV32 only. '),
    0x3A0: RiscVCSRReg(0x3A0, 'MRW', 'pmpcfg0', 'Physical memory protection configuration. '),
    0x3A1: RiscVCSRReg(0x3A1, 'MRW', 'pmpcfg1', 'Physical memory protection configuration, RV32 only. '),
    0x3A2: RiscVCSRReg(0x3A2, 'MRW', 'pmpcfg2', 'Physical memory protection configuration. '),
    0x3A3: RiscVCSRReg(0x3A3, 'MRW', 'pmpcfg3', 'Physical memory protection configuration, RV32 only. '),
    0x3a4: RiscVCSRReg(0x3a4, 'MRW', 'pmpcfg4', ''),
    0x3a5: RiscVCSRReg(0x3a5, 'MRW', 'pmpcfg5', ''),
    0x3a6: RiscVCSRReg(0x3a6, 'MRW', 'pmpcfg6', ''),
    0x3a7: RiscVCSRReg(0x3a7, 'MRW', 'pmpcfg7', ''),
    0x3a8: RiscVCSRReg(0x3a8, 'MRW', 'pmpcfg8', ''),
    0x3a9: RiscVCSRReg(0x3a9, 'MRW', 'pmpcfg9', ''),
    0x3aa: RiscVCSRReg(0x3aa, 'MRW', 'pmpcfg10', ''),
    0x3ab: RiscVCSRReg(0x3ab, 'MRW', 'pmpcfg11', ''),
    0x3ac: RiscVCSRReg(0x3ac, 'MRW', 'pmpcfg12', ''),
    0x3ad: RiscVCSRReg(0x3ad, 'MRW', 'pmpcfg13', ''),
    0x3AE: RiscVCSRReg(0x3AE, 'MRW', 'pmpcfg14', 'Physical memory protection configuration. '),
    0x3AF: RiscVCSRReg(0x3AF, 'MRW', 'pmpcfg15', 'Physical memory protection configuration, RV32 only. '),
    0x3B0: RiscVCSRReg(0x3B0, 'MRW', 'pmpaddr0', 'Physical memory protection address register. '),
    0x3B1: RiscVCSRReg(0x3B1, 'MRW', 'pmpaddr1', 'Physical memory protection address register. '),
    0x3b2: RiscVCSRReg(0x3b2, 'MRW', 'pmpaddr2', ''),
    0x3b3: RiscVCSRReg(0x3b3, 'MRW', 'pmpaddr3', ''),
    0x3b4: RiscVCSRReg(0x3b4, 'MRW', 'pmpaddr4', ''),
    0x3b5: RiscVCSRReg(0x3b5, 'MRW', 'pmpaddr5', ''),
    0x3b6: RiscVCSRReg(0x3b6, 'MRW', 'pmpaddr6', ''),
    0x3b7: RiscVCSRReg(0x3b7, 'MRW', 'pmpaddr7', ''),
    0x3b8: RiscVCSRReg(0x3b8, 'MRW', 'pmpaddr8', ''),
    0x3b9: RiscVCSRReg(0x3b9, 'MRW', 'pmpaddr9', ''),
    0x3ba: RiscVCSRReg(0x3ba, 'MRW', 'pmpaddr10', ''),
    0x3bb: RiscVCSRReg(0x3bb, 'MRW', 'pmpaddr11', ''),
    0x3bc: RiscVCSRReg(0x3bc, 'MRW', 'pmpaddr12', ''),
    0x3bd: RiscVCSRReg(0x3bd, 'MRW', 'pmpaddr13', ''),
    0x3be: RiscVCSRReg(0x3be, 'MRW', 'pmpaddr14', ''),
    0x3bf: RiscVCSRReg(0x3bf, 'MRW', 'pmpaddr15', ''),
    0x3c0: RiscVCSRReg(0x3c0, 'MRW', 'pmpaddr16', ''),
    0x3c1: RiscVCSRReg(0x3c1, 'MRW', 'pmpaddr17', ''),
    0x3c2: RiscVCSRReg(0x3c2, 'MRW', 'pmpaddr18', ''),
    0x3c3: RiscVCSRReg(0x3c3, 'MRW', 'pmpaddr19', ''),
    0x3c4: RiscVCSRReg(0x3c4, 'MRW', 'pmpaddr20', ''),
    0x3c5: RiscVCSRReg(0x3c5, 'MRW', 'pmpaddr21', ''),
    0x3c6: RiscVCSRReg(0x3c6, 'MRW', 'pmpaddr22', ''),
    0x3c7: RiscVCSRReg(0x3c7, 'MRW', 'pmpaddr23', ''),
    0x3c8: RiscVCSRReg(0x3c8, 'MRW', 'pmpaddr24', ''),
    0x3c9: RiscVCSRReg(0x3c9, 'MRW', 'pmpaddr25', ''),
    0x3ca: RiscVCSRReg(0x3ca, 'MRW', 'pmpaddr26', ''),
    0x3cb: RiscVCSRReg(0x3cb, 'MRW', 'pmpaddr27', ''),
    0x3cc: RiscVCSRReg(0x3cc, 'MRW', 'pmpaddr28', ''),
    0x3cd: RiscVCSRReg(0x3cd, 'MRW', 'pmpaddr29', ''),
    0x3ce: RiscVCSRReg(0x3ce, 'MRW', 'pmpaddr30', ''),
    0x3cf: RiscVCSRReg(0x3cf, 'MRW', 'pmpaddr31', ''),
    0x3d0: RiscVCSRReg(0x3d0, 'MRW', 'pmpaddr32', ''),
    0x3d1: RiscVCSRReg(0x3d1, 'MRW', 'pmpaddr33', ''),
    0x3d2: RiscVCSRReg(0x3d2, 'MRW', 'pmpaddr34', ''),
    0x3d3: RiscVCSRReg(0x3d3, 'MRW', 'pmpaddr35', ''),
    0x3d4: RiscVCSRReg(0x3d4, 'MRW', 'pmpaddr36', ''),
    0x3d5: RiscVCSRReg(0x3d5, 'MRW', 'pmpaddr37', ''),
    0x3d6: RiscVCSRReg(0x3d6, 'MRW', 'pmpaddr38', ''),
    0x3d7: RiscVCSRReg(0x3d7, 'MRW', 'pmpaddr39', ''),
    0x3d8: RiscVCSRReg(0x3d8, 'MRW', 'pmpaddr40', ''),
    0x3d9: RiscVCSRReg(0x3d9, 'MRW', 'pmpaddr41', ''),
    0x3da: RiscVCSRReg(0x3da, 'MRW', 'pmpaddr42', ''),
    0x3db: RiscVCSRReg(0x3db, 'MRW', 'pmpaddr43', ''),
    0x3dc: RiscVCSRReg(0x3dc, 'MRW', 'pmpaddr44', ''),
    0x3dd: RiscVCSRReg(0x3dd, 'MRW', 'pmpaddr45', ''),
    0x3de: RiscVCSRReg(0x3de, 'MRW', 'pmpaddr46', ''),
    0x3df: RiscVCSRReg(0x3df, 'MRW', 'pmpaddr47', ''),
    0x3e0: RiscVCSRReg(0x3e0, 'MRW', 'pmpaddr48', ''),
    0x3e1: RiscVCSRReg(0x3e1, 'MRW', 'pmpaddr49', ''),
    0x3e2: RiscVCSRReg(0x3e2, 'MRW', 'pmpaddr50', ''),
    0x3e3: RiscVCSRReg(0x3e3, 'MRW', 'pmpaddr51', ''),
    0x3e4: RiscVCSRReg(0x3e4, 'MRW', 'pmpaddr52', ''),
    0x3e5: RiscVCSRReg(0x3e5, 'MRW', 'pmpaddr53', ''),
    0x3e6: RiscVCSRReg(0x3e6, 'MRW', 'pmpaddr54', ''),
    0x3e7: RiscVCSRReg(0x3e7, 'MRW', 'pmpaddr55', ''),
    0x3e8: RiscVCSRReg(0x3e8, 'MRW', 'pmpaddr56', ''),
    0x3e9: RiscVCSRReg(0x3e9, 'MRW', 'pmpaddr57', ''),
    0x3ea: RiscVCSRReg(0x3ea, 'MRW', 'pmpaddr58', ''),
    0x3eb: RiscVCSRReg(0x3eb, 'MRW', 'pmpaddr59', ''),
    0x3ec: RiscVCSRReg(0x3ec, 'MRW', 'pmpaddr60', ''),
    0x3ed: RiscVCSRReg(0x3ed, 'MRW', 'pmpaddr61', ''),
    0x3ee: RiscVCSRReg(0x3ee, 'MRW', 'pmpaddr62', ''),
    0x3EF: RiscVCSRReg(0x3EF, 'MRW', 'pmpaddr63', 'Physical memory protection address register. '),
    0x740: RiscVCSRReg(0x740, 'MRW', 'mnscratch', 'Resumable NMI scratch register. '),
    0x741: RiscVCSRReg(0x741, 'MRW', 'mnepc', 'Resumable NMI program counter. '),
    0x742: RiscVCSRReg(0x742, 'MRW', 'mncause', 'Resumable NMI cause. '),
    0x744: RiscVCSRReg(0x744, 'MRW', 'mnstatus', 'Resumable NMI status. '),
    0xB00: RiscVCSRReg(0xB00, 'MRW', 'mcycle', 'Machine cycle counter. '),
    0xB02: RiscVCSRReg(0xB02, 'MRW', 'minstret', 'Machine instructions-retired counter. '),
    0xB03: RiscVCSRReg(0xB03, 'MRW', 'mhpmcounter3', 'Machine performance-monitoring counter. '),
    0xB04: RiscVCSRReg(0xB04, 'MRW', 'mhpmcounter4', 'Machine performance-monitoring counter. '),
    0xb05: RiscVCSRReg(0xb05, 'MRW', 'mhpmcounter5', ''),
    0xb06: RiscVCSRReg(0xb06, 'MRW', 'mhpmcounter6', ''),
    0xb07: RiscVCSRReg(0xb07, 'MRW', 'mhpmcounter7', ''),
    0xb08: RiscVCSRReg(0xb08, 'MRW', 'mhpmcounter8', ''),
    0xb09: RiscVCSRReg(0xb09, 'MRW', 'mhpmcounter9', ''),
    0xb0a: RiscVCSRReg(0xb0a, 'MRW', 'mhpmcounter10', ''),
    0xb0b: RiscVCSRReg(0xb0b, 'MRW', 'mhpmcounter11', ''),
    0xb0c: RiscVCSRReg(0xb0c, 'MRW', 'mhpmcounter12', ''),
    0xb0d: RiscVCSRReg(0xb0d, 'MRW', 'mhpmcounter13', ''),
    0xb0e: RiscVCSRReg(0xb0e, 'MRW', 'mhpmcounter14', ''),
    0xb0f: RiscVCSRReg(0xb0f, 'MRW', 'mhpmcounter15', ''),
    0xb10: RiscVCSRReg(0xb10, 'MRW', 'mhpmcounter16', ''),
    0xb11: RiscVCSRReg(0xb11, 'MRW', 'mhpmcounter17', ''),
    0xb12: RiscVCSRReg(0xb12, 'MRW', 'mhpmcounter18', ''),
    0xb13: RiscVCSRReg(0xb13, 'MRW', 'mhpmcounter19', ''),
    0xb14: RiscVCSRReg(0xb14, 'MRW', 'mhpmcounter20', ''),
    0xb15: RiscVCSRReg(0xb15, 'MRW', 'mhpmcounter21', ''),
    0xb16: RiscVCSRReg(0xb16, 'MRW', 'mhpmcounter22', ''),
    0xb17: RiscVCSRReg(0xb17, 'MRW', 'mhpmcounter23', ''),
    0xb18: RiscVCSRReg(0xb18, 'MRW', 'mhpmcounter24', ''),
    0xb19: RiscVCSRReg(0xb19, 'MRW', 'mhpmcounter25', ''),
    0xb1a: RiscVCSRReg(0xb1a, 'MRW', 'mhpmcounter26', ''),
    0xb1b: RiscVCSRReg(0xb1b, 'MRW', 'mhpmcounter27', ''),
    0xb1c: RiscVCSRReg(0xb1c, 'MRW', 'mhpmcounter28', ''),
    0xb1d: RiscVCSRReg(0xb1d, 'MRW', 'mhpmcounter29', ''),
    0xb1e: RiscVCSRReg(0xb1e, 'MRW', 'mhpmcounter30', ''),
    0xB1F: RiscVCSRReg(0xB1F, 'MRW', 'mhpmcounter31', 'Machine performance-monitoring counter. '),
    0xB80: RiscVCSRReg(0xB80, 'MRW', 'mcycleh', 'Upper 32 bits of {\tt mcycle}, RV32 only. '),
    0xB82: RiscVCSRReg(0xB82, 'MRW', 'minstreth', 'Upper 32 bits of {\tt minstret}, RV32 only. '),
    0xB83: RiscVCSRReg(0xB83, 'MRW', 'mhpmcounter3h', 'Upper 32 bits of {\tt mhpmcounter3}, RV32 only. '),
    0xB84: RiscVCSRReg(0xB84, 'MRW', 'mhpmcounter4h', 'Upper 32 bits of {\tt mhpmcounter4}, RV32 only. '),
    0xb85: RiscVCSRReg(0xb85, 'MRW', 'mhpmcounter5h', ''),
    0xb86: RiscVCSRReg(0xb86, 'MRW', 'mhpmcounter6h', ''),
    0xb87: RiscVCSRReg(0xb87, 'MRW', 'mhpmcounter7h', ''),
    0xb88: RiscVCSRReg(0xb88, 'MRW', 'mhpmcounter8h', ''),
    0xb89: RiscVCSRReg(0xb89, 'MRW', 'mhpmcounter9h', ''),
    0xb8a: RiscVCSRReg(0xb8a, 'MRW', 'mhpmcounter10h', ''),
    0xb8b: RiscVCSRReg(0xb8b, 'MRW', 'mhpmcounter11h', ''),
    0xb8c: RiscVCSRReg(0xb8c, 'MRW', 'mhpmcounter12h', ''),
    0xb8d: RiscVCSRReg(0xb8d, 'MRW', 'mhpmcounter13h', ''),
    0xb8e: RiscVCSRReg(0xb8e, 'MRW', 'mhpmcounter14h', ''),
    0xb8f: RiscVCSRReg(0xb8f, 'MRW', 'mhpmcounter15h', ''),
    0xb90: RiscVCSRReg(0xb90, 'MRW', 'mhpmcounter16h', ''),
    0xb91: RiscVCSRReg(0xb91, 'MRW', 'mhpmcounter17h', ''),
    0xb92: RiscVCSRReg(0xb92, 'MRW', 'mhpmcounter18h', ''),
    0xb93: RiscVCSRReg(0xb93, 'MRW', 'mhpmcounter19h', ''),
    0xb94: RiscVCSRReg(0xb94, 'MRW', 'mhpmcounter20h', ''),
    0xb95: RiscVCSRReg(0xb95, 'MRW', 'mhpmcounter21h', ''),
    0xb96: RiscVCSRReg(0xb96, 'MRW', 'mhpmcounter22h', ''),
    0xb97: RiscVCSRReg(0xb97, 'MRW', 'mhpmcounter23h', ''),
    0xb98: RiscVCSRReg(0xb98, 'MRW', 'mhpmcounter24h', ''),
    0xb99: RiscVCSRReg(0xb99, 'MRW', 'mhpmcounter25h', ''),
    0xb9a: RiscVCSRReg(0xb9a, 'MRW', 'mhpmcounter26h', ''),
    0xb9b: RiscVCSRReg(0xb9b, 'MRW', 'mhpmcounter27h', ''),
    0xb9c: RiscVCSRReg(0xb9c, 'MRW', 'mhpmcounter28h', ''),
    0xb9d: RiscVCSRReg(0xb9d, 'MRW', 'mhpmcounter29h', ''),
    0xb9e: RiscVCSRReg(0xb9e, 'MRW', 'mhpmcounter30h', ''),
    0xB9F: RiscVCSRReg(0xB9F, 'MRW', 'mhpmcounter31h', 'Upper 32 bits of {\tt mhpmcounter31}, RV32 only. '),
    0x320: RiscVCSRReg(0x320, 'MRW', 'mcountinhibit', 'Machine counter-inhibit register. '),
    0x323: RiscVCSRReg(0x323, 'MRW', 'mhpmevent3', 'Machine performance-monitoring event selector. '),
    0x324: RiscVCSRReg(0x324, 'MRW', 'mhpmevent4', 'Machine performance-monitoring event selector. '),
    0x325: RiscVCSRReg(0x325, 'MRW', 'mhpmevent5', ''),
    0x326: RiscVCSRReg(0x326, 'MRW', 'mhpmevent6', ''),
    0x327: RiscVCSRReg(0x327, 'MRW', 'mhpmevent7', ''),
    0x328: RiscVCSRReg(0x328, 'MRW', 'mhpmevent8', ''),
    0x329: RiscVCSRReg(0x329, 'MRW', 'mhpmevent9', ''),
    0x32a: RiscVCSRReg(0x32a, 'MRW', 'mhpmevent10', ''),
    0x32b: RiscVCSRReg(0x32b, 'MRW', 'mhpmevent11', ''),
    0x32c: RiscVCSRReg(0x32c, 'MRW', 'mhpmevent12', ''),
    0x32d: RiscVCSRReg(0x32d, 'MRW', 'mhpmevent13', ''),
    0x32e: RiscVCSRReg(0x32e, 'MRW', 'mhpmevent14', ''),
    0x32f: RiscVCSRReg(0x32f, 'MRW', 'mhpmevent15', ''),
    0x330: RiscVCSRReg(0x330, 'MRW', 'mhpmevent16', ''),
    0x331: RiscVCSRReg(0x331, 'MRW', 'mhpmevent17', ''),
    0x332: RiscVCSRReg(0x332, 'MRW', 'mhpmevent18', ''),
    0x333: RiscVCSRReg(0x333, 'MRW', 'mhpmevent19', ''),
    0x334: RiscVCSRReg(0x334, 'MRW', 'mhpmevent20', ''),
    0x335: RiscVCSRReg(0x335, 'MRW', 'mhpmevent21', ''),
    0x336: RiscVCSRReg(0x336, 'MRW', 'mhpmevent22', ''),
    0x337: RiscVCSRReg(0x337, 'MRW', 'mhpmevent23', ''),
    0x338: RiscVCSRReg(0x338, 'MRW', 'mhpmevent24', ''),
    0x339: RiscVCSRReg(0x339, 'MRW', 'mhpmevent25', ''),
    0x33a: RiscVCSRReg(0x33a, 'MRW', 'mhpmevent26', ''),
    0x33b: RiscVCSRReg(0x33b, 'MRW', 'mhpmevent27', ''),
    0x33c: RiscVCSRReg(0x33c, 'MRW', 'mhpmevent28', ''),
    0x33d: RiscVCSRReg(0x33d, 'MRW', 'mhpmevent29', ''),
    0x33e: RiscVCSRReg(0x33e, 'MRW', 'mhpmevent30', ''),
    0x33F: RiscVCSRReg(0x33F, 'MRW', 'mhpmevent31', 'Machine performance-monitoring event selector. '),
    0x7A0: RiscVCSRReg(0x7A0, 'MRW', 'tselect', 'Debug/Trace trigger register select. '),
    0x7A1: RiscVCSRReg(0x7A1, 'MRW', 'tdata1', 'First Debug/Trace trigger data register. '),
    0x7A2: RiscVCSRReg(0x7A2, 'MRW', 'tdata2', 'Second Debug/Trace trigger data register. '),
    0x7A3: RiscVCSRReg(0x7A3, 'MRW', 'tdata3', 'Third Debug/Trace trigger data register. '),
    0x7A8: RiscVCSRReg(0x7A8, 'MRW', 'mcontext', 'Machine-mode context register. '),
    0x7B0: RiscVCSRReg(0x7B0, 'DRW', 'dcsr', 'Debug control and status register. '),
    0x7B1: RiscVCSRReg(0x7B1, 'DRW', 'dpc', 'Debug program counter. '),
    0x7B2: RiscVCSRReg(0x7B2, 'DRW', 'dscratch0', 'Debug scratch register 0. '),
    0x7B3: RiscVCSRReg(0x7B3, 'DRW', 'dscratch1', 'Debug scratch register 1. '),
}
